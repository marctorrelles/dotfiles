[user]
  name = Marc Torrelles
  email = marctorrelles@gmail.com

[push]
  default = simple

[safe]
  directory = *

[credential]
  helper = /usr/bin/gp credential-helper

[color]
  diff = auto
  branch = auto
  interactive = auto
  status = auto

[apply]
  whitespace = fix

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  ac = !git add -A && git commit -av

  # Pull in remote changes for the current repository and all its submodules
  p = pull --recurse-submodules

  # List these aliases
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit
  ammend = commit --amend --no-edit
  amend = ammend

  # Reword last commit
  reword = commit --amend

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Interactive rebase with a fresh origin/master or origin/main
  rebmaster = "!git fetch origin && git rebase origin/master -i"
  rebmain = "!git fetch origin && git rebase origin/main -i"

  # Merge with a fresh origin/master or origin/main
  mergemaster = "!git fetch origin && git merge origin/master"
  mergemain = "!git fetch origin && git merge origin/main"

  # Remove branches that have already been merged with main
  clean = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = "!git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
  remotes = remote --verbose

  # Create a new branch
  new = checkout -b
